#!/usr/bin/env python3
"""
Test the exam mathematics handler to ensure 1/3 questions are generated by DeepSeek AI
"""

import os
import logging
from typing import Dict, List

# Set up logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Set the API key directly
os.environ['DEEPSEEK_API_KEY'] = 'sk-5e3b99e25a5246eb8df7f480e4989677'

def test_exam_math_ratio():
    """Test that exam mathematics generates questions in 2:1 ratio (2 database : 1 AI)"""
    
    print("üßÆ Testing Exam Mathematics Question Ratio (2:1 Database:AI)")
    print("=" * 70)
    
    try:
        # Import the exam handler
        from handlers.exam_mathematics_handler import ExamMathematicsHandler
        from services.mathematics_service import MathematicsService
        from standalone_math_generator import StandaloneMathGenerator
        
        # Create mock services
        class MockWhatsAppService:
            def send_message(self, user_id, message):
                print(f"üì± WhatsApp to {user_id}: {message[:100]}...")
            
            def send_interactive_message(self, user_id, message, buttons):
                print(f"üì± Interactive to {user_id}: {message[:100]}...")
                print(f"   Buttons: {[btn['text'] for btn in buttons]}")
        
        # Initialize services
        whatsapp_service = MockWhatsAppService()
        mathematics_service = MathematicsService()
        question_generator = StandaloneMathGenerator()
        
        # Create exam handler
        exam_handler = ExamMathematicsHandler(
            whatsapp_service=whatsapp_service,
            mathematics_service=mathematics_service,
            question_generator=question_generator
        )
        
        # Test the ratio logic
        print("\nüìä Testing Question Ratio Logic:")
        print("-" * 50)
        
        # Simulate 12 questions to test the ratio
        test_questions = 12
        ai_questions = 0
        database_questions = 0
        
        for question_num in range(1, test_questions + 1):
            # This is the same logic used in the handler
            should_generate_ai = (question_num % 3 == 0)
            question_type = 'ai' if should_generate_ai else 'database'
            
            if question_type == 'ai':
                ai_questions += 1
                print(f"Q{question_num:2d}: ü§ñ AI Generated (divisible by 3)")
            else:
                database_questions += 1
                print(f"Q{question_num:2d}: üìö Database Question")
        
        print(f"\nüìà Results for {test_questions} questions:")
        print(f"   Database Questions: {database_questions}")
        print(f"   AI Questions: {ai_questions}")
        print(f"   Ratio: {database_questions}:{ai_questions}")
        print(f"   Expected Ratio: 2:1")
        
        # Verify the ratio
        expected_ai = test_questions // 3
        expected_db = test_questions - expected_ai
        
        if ai_questions == expected_ai and database_questions == expected_db:
            print("‚úÖ RATIO TEST PASSED: Correct 2:1 ratio maintained!")
        else:
            print(f"‚ùå RATIO TEST FAILED: Expected {expected_db}:{expected_ai}, got {database_questions}:{ai_questions}")
        
        # Test AI question generation
        print(f"\nü§ñ Testing AI Question Generation:")
        print("-" * 50)
        
        try:
            # Test generating an AI question
            question_data = question_generator.generate_question(
                subject="Mathematics",
                topic="Algebra",
                difficulty="medium",
                user_id="test_user"
            )
            
            if question_data:
                print("‚úÖ AI Question Generation: SUCCESS")
                print(f"   Question: {question_data.get('question', '')[:100]}...")
                print(f"   Source: {question_data.get('source', 'N/A')}")
                print(f"   Difficulty: {question_data.get('difficulty', 'N/A')}")
                print(f"   Points: {question_data.get('points', 'N/A')}")
            else:
                print("‚ùå AI Question Generation: FAILED")
                
        except Exception as e:
            print(f"‚ùå AI Question Generation Error: {e}")
        
        print("\n" + "=" * 70)
        print("üèÅ Exam Mathematics Ratio Test Completed!")
        
    except ImportError as e:
        print(f"‚ùå Import Error: {e}")
    except Exception as e:
        print(f"‚ùå Unexpected Error: {e}")

def test_question_generation_flow():
    """Test the actual question generation flow"""
    
    print("\nüîÑ Testing Question Generation Flow:")
    print("-" * 50)
    
    try:
        from standalone_math_generator import standalone_math_generator
        
        # Test topics and difficulties that would be used in exam
        topics = ["Algebra", "Geometry", "Statistics", "Trigonometry"]
        difficulties = ["easy", "medium", "difficult"]
        
        for i, topic in enumerate(topics[:2]):  # Test first 2 topics
            difficulty = difficulties[i % len(difficulties)]
            
            print(f"\nüìö Testing {topic} - {difficulty}:")
            
            question_data = standalone_math_generator.generate_question(
                subject="Mathematics",
                topic=topic,
                difficulty=difficulty,
                user_id="exam_test_user"
            )
            
            if question_data:
                print(f"‚úÖ Generated: {question_data.get('question', '')[:80]}...")
                print(f"   Source: {question_data.get('source', 'N/A')}")
            else:
                print("‚ùå Generation failed")
                
    except Exception as e:
        print(f"‚ùå Flow Test Error: {e}")

if __name__ == "__main__":
    test_exam_math_ratio()
    test_question_generation_flow()

